Header extraído:
from lexer.src.runtime.token_types import *

Definiciones encontradas:
  delim = [' ' '\t']
  ws = delim+
  letter = ['A'-'Z''a'-'z']
  digit = ['0'-'9']
  alnum = letter | digit | '_'
  id = letter (alnum)*
  number = digit+('.'digit+)?('E'('+'|'-')?digit+)?

Analizador léxico generado y guardado en: thelexer.py
Expresión global generada: ((([\  \\t])+))|(\#\#\#.*[\n])|(\\n)|(if)|(else)|(while)|(for)|(return)|(break)|(continue)|((([A-Za-z]) ((([A-Za-z]) | ([0-9]) | _))*))|((([0-9])+(\.([0-9])+)?(E(\+|\-)?([0-9])+)?))|(:=)|(\+)|(\-)|(\*)|(/)|(\()|(\))|(,)|(;)|(:)|(<)|(=)|(>)|(\{)|(\})|(\#)|(eof)|(\.)
Expresión global generada (repr): '((([\\  \\\\t])+)\x80)|(\\#\\#\\#.*[\\n]\x81)|(\\\\n\x82)|(if\x83)|(else\x84)|(while\x85)|(for\x86)|(return\x87)|(break\x88)|(continue\x89)|((([A-Za-z]) ((([A-Za-z]) | ([0-9]) | _))*)\x8a)|((([0-9])+(\\.([0-9])+)?(E(\\+|\\-)?([0-9])+)?)\x8b)|(:=\x8c)|(\\+\x8d)|(\\-\x8e)|(\\*\x8f)|(/\x90)|(\\(\x91)|(\\)\x92)|(,\x93)|(;\x94)|(:\x95)|(<\x96)|(=\x97)|(>\x98)|(\\{\x99)|(\\}\x9a)|(\\#\x9b)|(eof\x9c)|(\\.\x9d)'
DFA global construido con éxito.
→ Regenerando lexer…
   Lexer regenerado correctamente.

--- Leyendo gramática desde: /home/esteb/compis1/AnalizadorSintactico/sintaxer/inputs/test.yalp ---
  1: /* INICIA Sección de TOKENS */
  2: %token ID        [A-Za-z][A-Za-z0-9_]*
  3: %token LT        <
  4: %token GT        >
  5: %token LBRACKET  \[
  6: %token RBRACKET  \]
  7: %token WS        [ \t]+
  8: IGNORE WS
  9: %%
 10: /* INICIA Sección de PRODUCCIONES */
 11: s:
 12:   s LT p
 13:   |   p
 14: ;
 15: p:
 16:     p GT q
 17:   | q
 18: ;
 19: q:
 20:     LBRACKET s RBRACKET
 21:   | ID
 22: ;
 23: /* FINALIZA Sección de PRODUCCIONES */

=== Gramática extendida ===
0. s' → s
1. s → s LT p
2. s → p
3. p → p GT q
4. p → q
5. q → LBRACKET s RBRACKET
6. q → ID

=== Autómata LR(0) ===
I0:
  s' → · s
  s → · s LT p
  p → · p GT q
  q → · LBRACKET s RBRACKET
  p → · q
  s → · p
  q → · ID
I1:
  q → ID ·
I2:
  p → q ·
I3:
  s' → s ·
  s → s · LT p
I4:
  s → p ·
  p → p · GT q
I5:
  q → LBRACKET · s RBRACKET
  s → · s LT p
  p → · p GT q
  q → · LBRACKET s RBRACKET
  p → · q
  s → · p
  q → · ID
I6:
  p → · p GT q
  q → · LBRACKET s RBRACKET
  p → · q
  s → s LT · p
  q → · ID
I7:
  p → p GT · q
  q → · ID
  q → · LBRACKET s RBRACKET
I8:
  q → LBRACKET s · RBRACKET
  s → s · LT p
I9:
  s → s LT p ·
  p → p · GT q
I10:
  p → p GT q ·
I11:
  q → LBRACKET s RBRACKET ·

=== Tabla SLR(1) (ACTION | GOTO) ===
|   Estado | $                | GT            | ID           | LBRACKET     | LT            | RBRACKET      | p   | q   | s   |
|----------|------------------|---------------|--------------|--------------|---------------|---------------|-----|-----|-----|
|        0 |                  |               | ('shift', 1) | ('shift', 5) |               |               | 4   | 2   | 3   |
|        1 | ('reduce', 6)    | ('reduce', 6) |              |              | ('reduce', 6) | ('reduce', 6) |     |     |     |
|        2 | ('reduce', 4)    | ('reduce', 4) |              |              | ('reduce', 4) | ('reduce', 4) |     |     |     |
|        3 | ('accept', None) |               |              |              | ('shift', 6)  |               |     |     |     |
|        4 | ('reduce', 2)    | ('shift', 7)  |              |              | ('reduce', 2) | ('reduce', 2) |     |     |     |
|        5 |                  |               | ('shift', 1) | ('shift', 5) |               |               | 4   | 2   | 8   |
|        6 |                  |               | ('shift', 1) | ('shift', 5) |               |               | 9   | 2   |     |
|        7 |                  |               | ('shift', 1) | ('shift', 5) |               |               |     | 10  |     |
|        8 |                  |               |              |              | ('shift', 6)  | ('shift', 11) |     |     |     |
|        9 | ('reduce', 1)    | ('shift', 7)  |              |              | ('reduce', 1) | ('reduce', 1) |     |     |     |
|       10 | ('reduce', 3)    | ('reduce', 3) |              |              | ('reduce', 3) | ('reduce', 3) |     |     |     |
|       11 | ('reduce', 5)    | ('reduce', 5) |              |              | ('reduce', 5) | ('reduce', 5) |     |     |     |

Parser generado exitosamente en: /home/esteb/compis1/AnalizadorSintactico/sintaxer/theparser.py
   Parser regenerado correctamente.

→ Tokenizando el archivo fuente: inputs/input2.txt
⟶ Token: ('ID', 'foo'), lexema: 'foo'
⟶ Token: ('GT', '>'), lexema: '>'
⟶ Token: ('ID', 'bar'), lexema: 'bar'

[DEBUG-LEXER] Tokens generados por el lexer (incluye WS/EOF):
    0: ("ID", "foo")
    1: ("GT", ">")
    2: ("ID", "bar")
    3: ("EOF", "")
[/DEBUG-LEXER]

   Tokens filtrados (4): [('ID', 'foo'), ('GT', '>'), ('ID', 'bar'), ('EOF', '')]


=== Traza de parseo (Shift/Reduce) ===
|   Paso | Pila          | Lectura    | Acción            |
|--------|---------------|------------|-------------------|
|      1 | [0]           | ID GT ID $ | shift → 1         |
|      2 | [0, 1]        | GT ID $    | reduce q → ID     |
|      3 | [0, 2]        | GT ID $    | reduce p → q      |
|      4 | [0, 4]        | GT ID $    | shift → 7         |
|      5 | [0, 4, 7]     | ID $       | shift → 1         |
|      6 | [0, 4, 7, 1]  | $          | reduce q → ID     |
|      7 | [0, 4, 7, 10] | $          | reduce p → p GT q |
|      8 | [0, 4]        | $          | reduce s → p      |
|      9 | [0, 3]        | $          | accept            |

→ Iniciando análisis sintáctico con Parser.parse()
DEBUG-PARSE → state=0, term='ID', ACCEPT_STATE=3
DEBUG-PARSE → state=1, term='GT', ACCEPT_STATE=3
DEBUG-PARSE → state=2, term='GT', ACCEPT_STATE=3
DEBUG-PARSE → state=4, term='GT', ACCEPT_STATE=3
DEBUG-PARSE → state=7, term='ID', ACCEPT_STATE=3
DEBUG-PARSE → state=1, term='$', ACCEPT_STATE=3
DEBUG-PARSE → state=10, term='$', ACCEPT_STATE=3
DEBUG-PARSE → state=4, term='$', ACCEPT_STATE=3
   ¡Parseo correcto! El archivo fuente cumple la gramática.

