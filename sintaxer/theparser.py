#!/usr/bin/env python3
# Auto-generated parser SLR(1)

import sys
from typing import List, Tuple, Any

class Parser:
    ACTION = {(2, 'IF'): ('reduce', 4), (2, 'ID'): ('reduce', 4), (2, 'WHILE'): ('reduce', 4), (2, 'EOF'): ('reduce', 4), (2, 'RETURN'): ('reduce', 4), (2, 'LPAREN'): ('reduce', 4), (2, 'LBRACE'): ('reduce', 4), (2, 'NUMBER'): ('reduce', 4), (2, 'CONTINUE'): ('reduce', 4), (2, 'BREAK'): ('reduce', 4), (2, 'FOR'): ('reduce', 4), (3, 'LPAREN'): ('shift', 20), (4, 'PLUS'): ('shift', 21), (4, 'MINUS'): ('shift', 22), (5, 'DIV'): ('shift', 23), (5, 'TIMES'): ('shift', 24), (6, '{'): ('shift', 25), (6, 'ASSIGNOP'): ('shift', 26), (7, 'SEMICOLON'): ('shift', 27), (8, 'LPAREN'): ('shift', 28), (11, 'LPAREN'): ('shift', 12), (11, 'NUMBER'): ('shift', 15), (11, 'ID'): ('shift', 6), (12, 'LPAREN'): ('shift', 12), (12, 'NUMBER'): ('shift', 15), (12, 'ID'): ('shift', 6), (14, 'GT'): ('shift', 32), (14, 'LT'): ('shift', 33), (14, 'EQ'): ('shift', 34), (15, '{'): ('shift', 35), (17, 'SEMICOLON'): ('shift', 36), (18, 'SEMICOLON'): ('shift', 37), (19, 'LPAREN'): ('shift', 38), (20, 'LPAREN'): ('shift', 12), (20, 'NUMBER'): ('shift', 15), (20, 'ID'): ('shift', 6), (21, 'LPAREN'): ('shift', 12), (21, 'NUMBER'): ('shift', 15), (21, 'ID'): ('shift', 41), (22, 'LPAREN'): ('shift', 12), (22, 'NUMBER'): ('shift', 15), (22, 'ID'): ('shift', 41), (23, 'NUMBER'): ('shift', 15), (23, 'ID'): ('shift', 41), (23, 'LPAREN'): ('shift', 12), (24, 'NUMBER'): ('shift', 15), (24, 'ID'): ('shift', 41), (24, 'LPAREN'): ('shift', 12), (25, '/*'): ('shift', 45), (26, 'LPAREN'): ('shift', 12), (26, 'NUMBER'): ('shift', 15), (26, 'ID'): ('shift', 6), (27, '{'): ('shift', 47), (28, 'LPAREN'): ('shift', 12), (28, 'NUMBER'): ('shift', 15), (28, 'ID'): ('shift', 6), (29, 'SEMICOLON'): ('shift', 49), (30, 'RPAREN'): ('shift', 50), (31, 'IF'): ('reduce', 4), (31, 'NUMBER'): ('reduce', 4), (31, 'ID'): ('reduce', 4), (31, 'WHILE'): ('reduce', 4), (31, 'RETURN'): ('reduce', 4), (31, 'LPAREN'): ('reduce', 4), (31, 'LBRACE'): ('reduce', 4), (31, 'RBRACE'): ('reduce', 4), (31, 'CONTINUE'): ('reduce', 4), (31, 'BREAK'): ('reduce', 4), (31, 'FOR'): ('reduce', 4), (32, 'LPAREN'): ('shift', 12), (32, 'NUMBER'): ('shift', 15), (32, 'ID'): ('shift', 41), (33, 'LPAREN'): ('shift', 12), (33, 'NUMBER'): ('shift', 15), (33, 'ID'): ('shift', 41), (34, 'LPAREN'): ('shift', 12), (34, 'NUMBER'): ('shift', 15), (34, 'ID'): ('shift', 41), (35, '/*'): ('shift', 55), (36, '{'): ('shift', 56), (37, '{'): ('shift', 57), (38, 'LPAREN'): ('shift', 12), (38, 'NUMBER'): ('shift', 15), (38, 'ID'): ('shift', 6), (39, 'RPAREN'): ('shift', 59), (40, 'TIMES'): ('shift', 24), (40, 'DIV'): ('shift', 23), (40, '{'): ('shift', 60), (41, '{'): ('shift', 25), (42, '{'): ('shift', 61), (42, 'DIV'): ('shift', 23), (42, 'TIMES'): ('shift', 24), (43, '{'): ('shift', 62), (44, '{'): ('shift', 63), (45, 'Nodo'): ('shift', 64), (46, '{'): ('shift', 65), (47, '/*'): ('shift', 66), (48, 'RPAREN'): ('shift', 67), (49, '{'): ('shift', 68), (50, '{'): ('shift', 69), (51, '{'): ('shift', 70), (52, 'PLUS'): ('shift', 21), (52, 'MINUS'): ('shift', 22), (52, '{'): ('shift', 71), (53, 'PLUS'): ('shift', 21), (53, 'MINUS'): ('shift', 22), (53, '{'): ('shift', 72), (54, 'PLUS'): ('shift', 21), (54, 'MINUS'): ('shift', 22), (54, '{'): ('shift', 73), (55, 'Nodo'): ('shift', 74), (56, '/*'): ('shift', 75), (57, '/*'): ('shift', 76), (58, 'SEMICOLON'): ('shift', 77), (59, 'IF'): ('reduce', 4), (59, 'ID'): ('reduce', 4), (59, 'WHILE'): ('reduce', 4), (59, 'RETURN'): ('reduce', 4), (59, 'LPAREN'): ('reduce', 4), (59, 'NUMBER'): ('reduce', 4), (59, 'LBRACE'): ('reduce', 4), (59, 'BREAK'): ('reduce', 4), (59, 'FOR'): ('reduce', 4), (59, 'CONTINUE'): ('reduce', 4), (60, '/*'): ('shift', 79), (61, '/*'): ('shift', 80), (62, '/*'): ('shift', 81), (63, '/*'): ('shift', 82), (64, 'AST:'): ('shift', 83), (65, '/*'): ('shift', 84), (66, 'Nodo'): ('shift', 85), (67, 'IF'): ('reduce', 4), (67, 'ID'): ('reduce', 4), (67, 'WHILE'): ('reduce', 4), (67, 'RETURN'): ('reduce', 4), (67, 'LPAREN'): ('reduce', 4), (67, 'NUMBER'): ('reduce', 4), (67, 'LBRACE'): ('reduce', 4), (67, 'BREAK'): ('reduce', 4), (67, 'FOR'): ('reduce', 4), (67, 'CONTINUE'): ('reduce', 4), (68, '/*'): ('shift', 87), (69, '/*'): ('shift', 88), (70, '/*'): ('shift', 89), (71, '/*'): ('shift', 90), (72, '/*'): ('shift', 91), (73, '/*'): ('shift', 92), (74, 'AST:'): ('shift', 93), (75, 'Nodo'): ('shift', 94), (76, 'Nodo'): ('shift', 95), (77, 'LPAREN'): ('shift', 12), (77, 'NUMBER'): ('shift', 15), (77, 'ID'): ('shift', 6), (78, 'ELSE'): ('shift', 97), (78, '%prec'): ('shift', 98), (79, 'Nodo'): ('shift', 99), (80, 'Nodo'): ('shift', 100), (81, 'Nodo'): ('shift', 101), (82, 'Nodo'): ('shift', 102), (83, 'variable'): ('shift', 103), (84, 'Nodo'): ('shift', 104), (85, 'AST:'): ('shift', 105), (86, '{'): ('shift', 106), (87, 'Nodo'): ('shift', 107), (88, 'Nodo'): ('shift', 108), (89, 'Nodo'): ('shift', 109), (90, 'Nodo'): ('shift', 110), (91, 'Nodo'): ('shift', 111), (92, 'Nodo'): ('shift', 112), (93, 'constante'): ('shift', 113), (94, 'AST:'): ('shift', 114), (95, 'AST:'): ('shift', 115), (96, 'SEMICOLON'): ('shift', 116), (97, 'IF'): ('reduce', 4), (97, 'ID'): ('reduce', 4), (97, 'WHILE'): ('reduce', 4), (97, 'RETURN'): ('reduce', 4), (97, 'LPAREN'): ('reduce', 4), (97, 'LBRACE'): ('reduce', 4), (97, 'NUMBER'): ('reduce', 4), (97, 'CONTINUE'): ('reduce', 4), (97, 'BREAK'): ('reduce', 4), (97, 'FOR'): ('reduce', 4), (98, 'LOWER_THAN_ELSE'): ('shift', 118), (99, 'AST:'): ('shift', 119), (100, 'AST:'): ('shift', 120), (101, 'AST:'): ('shift', 121), (102, 'AST:'): ('shift', 122), (103, '*/'): ('shift', 123), (104, 'AST:'): ('shift', 124), (105, 'expresión'): ('shift', 125), (106, '/*'): ('shift', 126), (107, 'AST:'): ('shift', 127), (108, 'AST:'): ('shift', 128), (109, 'AST:'): ('shift', 129), (110, 'AST:'): ('shift', 130), (111, 'AST:'): ('shift', 131), (112, 'AST:'): ('shift', 132), (113, 'numérica'): ('shift', 133), (114, 'continue'): ('shift', 134), (115, 'break'): ('shift', 135), (116, 'LPAREN'): ('shift', 12), (116, 'NUMBER'): ('shift', 15), (116, 'ID'): ('shift', 6), (117, '{'): ('shift', 137), (118, '{'): ('shift', 138), (119, 'suma'): ('shift', 139), (120, 'resta'): ('shift', 140), (121, 'división'): ('shift', 141), (122, 'multiplicación'): ('shift', 142), (123, '}'): ('shift', 143), (124, 'asignación'): ('shift', 144), (125, 'simple'): ('shift', 145), (126, 'Nodo'): ('shift', 146), (127, 'return'): ('shift', 147), (128, 'paréntesis'): ('shift', 148), (129, 'bloque'): ('shift', 149), (130, 'comparación'): ('shift', 150), (131, 'comparación'): ('shift', 151), (132, 'comparación'): ('shift', 152), (133, '*/'): ('shift', 153), (134, '*/'): ('shift', 154), (135, '*/'): ('shift', 155), (136, 'RPAREN'): ('shift', 156), (137, '/*'): ('shift', 157), (138, '/*'): ('shift', 158), (139, '*/'): ('shift', 159), (140, '*/'): ('shift', 160), (141, '*/'): ('shift', 161), (142, '*/'): ('shift', 162), (144, '*/'): ('shift', 163), (145, 'segida'): ('shift', 164), (146, 'AST:'): ('shift', 165), (147, '*/'): ('shift', 166), (148, '*/'): ('shift', 167), (149, '(stmt_list)'): ('shift', 168), (150, '>'): ('shift', 169), (151, '<'): ('shift', 170), (152, '='): ('shift', 171), (153, '}'): ('shift', 172), (154, '}'): ('shift', 173), (155, '}'): ('shift', 174), (156, 'IF'): ('reduce', 4), (156, 'ID'): ('reduce', 4), (156, 'WHILE'): ('reduce', 4), (156, 'RETURN'): ('reduce', 4), (156, 'LPAREN'): ('reduce', 4), (156, 'NUMBER'): ('reduce', 4), (156, 'LBRACE'): ('reduce', 4), (156, 'BREAK'): ('reduce', 4), (156, 'FOR'): ('reduce', 4), (156, 'CONTINUE'): ('reduce', 4), (157, 'Nodo'): ('shift', 176), (158, 'Nodo'): ('shift', 177), (159, '}'): ('shift', 178), (160, '}'): ('shift', 179), (161, '}'): ('shift', 180), (162, '}'): ('shift', 181), (163, '}'): ('shift', 182), (164, 'de'): ('shift', 183), (165, 'while'): ('shift', 184), (166, '}'): ('shift', 185), (167, '}'): ('shift', 186), (168, '*/'): ('shift', 187), (169, '*/'): ('shift', 188), (170, '*/'): ('shift', 189), (171, '*/'): ('shift', 190), (175, '{'): ('shift', 191), (176, 'AST:'): ('shift', 192), (177, 'AST:'): ('shift', 193), (183, 'punto‐y‐coma'): ('shift', 194), (184, '*/'): ('shift', 195), (187, '}'): ('shift', 196), (188, '}'): ('shift', 197), (189, '}'): ('shift', 198), (190, '}'): ('shift', 199), (191, '/*'): ('shift', 200), (192, 'if‐else'): ('shift', 201), (193, 'if-else'): ('shift', 202), (194, '*/'): ('shift', 203), (195, '}'): ('shift', 204), (200, 'Nodo'): ('shift', 205), (201, '*/'): ('shift', 206), (202, '*/'): ('shift', 207), (203, '}'): ('shift', 208), (205, 'AST:'): ('shift', 209), (206, '}'): ('shift', 210), (207, '}'): ('shift', 211), (209, 'for'): ('shift', 212), (212, '*/'): ('shift', 213), (213, '}'): ('shift', 214), (0, 'IF'): ('reduce', 2), (0, 'EOF'): ('reduce', 2), (0, 'RETURN'): ('reduce', 2), (0, 'LBRACE'): ('reduce', 2), (0, 'RBRACE'): ('reduce', 2), (0, 'NUMBER'): ('reduce', 2), (0, 'FOR'): ('reduce', 2), (0, 'WHILE'): ('reduce', 2), (0, 'LPAREN'): ('reduce', 2), (0, 'CONTINUE'): ('reduce', 2), (0, 'ID'): ('reduce', 2), (0, 'BREAK'): ('reduce', 2), (1, '$'): ('accept', None), (2, 'RBRACE'): ('reduce', 4), (2, '{'): ('reduce', 4), (2, '%prec'): ('reduce', 4), (2, 'ELSE'): ('reduce', 4), (4, 'EQ'): ('reduce', 19), (4, 'GT'): ('reduce', 19), (4, 'LT'): ('reduce', 19), (4, 'SEMICOLON'): ('reduce', 19), (4, 'RPAREN'): ('reduce', 19), (4, '{'): ('reduce', 19), (5, 'EQ'): ('reduce', 22), (5, 'GT'): ('reduce', 22), (5, 'LT'): ('reduce', 22), (5, 'SEMICOLON'): ('reduce', 22), (5, 'PLUS'): ('reduce', 22), (5, 'MINUS'): ('reduce', 22), (5, 'RPAREN'): ('reduce', 22), (5, '{'): ('reduce', 22), (9, '$'): ('reduce', 1), (10, 'IF'): ('reduce', 3), (10, 'EOF'): ('reduce', 3), (10, 'RETURN'): ('reduce', 3), (10, 'LBRACE'): ('reduce', 3), (10, 'RBRACE'): ('reduce', 3), (10, 'NUMBER'): ('reduce', 3), (10, 'FOR'): ('reduce', 3), (10, 'WHILE'): ('reduce', 3), (10, 'LPAREN'): ('reduce', 3), (10, 'CONTINUE'): ('reduce', 3), (10, 'ID'): ('reduce', 3), (10, 'BREAK'): ('reduce', 3), (13, 'IF'): ('reduce', 2), (13, 'EOF'): ('reduce', 2), (13, 'RETURN'): ('reduce', 2), (13, 'LBRACE'): ('reduce', 2), (13, 'RBRACE'): ('reduce', 2), (13, 'NUMBER'): ('reduce', 2), (13, 'FOR'): ('reduce', 2), (13, 'WHILE'): ('reduce', 2), (13, 'LPAREN'): ('reduce', 2), (13, 'CONTINUE'): ('reduce', 2), (13, 'ID'): ('reduce', 2), (13, 'BREAK'): ('reduce', 2), (14, '{'): ('reduce', 15), (14, 'SEMICOLON'): ('reduce', 15), (14, 'RPAREN'): ('reduce', 15), (16, 'EQ'): ('reduce', 25), (16, 'GT'): ('reduce', 25), (16, 'LT'): ('reduce', 25), (16, 'DIV'): ('reduce', 25), (16, 'SEMICOLON'): ('reduce', 25), (16, 'PLUS'): ('reduce', 25), (16, 'MINUS'): ('reduce', 25), (16, 'TIMES'): ('reduce', 25), (16, 'RPAREN'): ('reduce', 25), (16, '{'): ('reduce', 25), (31, 'EOF'): ('reduce', 4), (31, '{'): ('reduce', 4), (31, '%prec'): ('reduce', 4), (31, 'ELSE'): ('reduce', 4), (59, 'EOF'): ('reduce', 4), (59, 'RBRACE'): ('reduce', 4), (59, '{'): ('reduce', 4), (59, '%prec'): ('reduce', 4), (59, 'ELSE'): ('reduce', 4), (67, 'EOF'): ('reduce', 4), (67, 'RBRACE'): ('reduce', 4), (67, '{'): ('reduce', 4), (67, '%prec'): ('reduce', 4), (67, 'ELSE'): ('reduce', 4), (97, 'EOF'): ('reduce', 4), (97, 'RBRACE'): ('reduce', 4), (97, '{'): ('reduce', 4), (97, '%prec'): ('reduce', 4), (97, 'ELSE'): ('reduce', 4), (143, 'EQ'): ('reduce', 27), (143, 'GT'): ('reduce', 27), (143, 'LT'): ('reduce', 27), (143, 'PLUS'): ('reduce', 27), (143, 'MINUS'): ('reduce', 27), (143, 'RPAREN'): ('reduce', 27), (143, '{'): ('reduce', 27), (143, 'DIV'): ('reduce', 27), (143, 'SEMICOLON'): ('reduce', 27), (143, 'TIMES'): ('reduce', 27), (156, 'EOF'): ('reduce', 4), (156, 'RBRACE'): ('reduce', 4), (156, '{'): ('reduce', 4), (156, '%prec'): ('reduce', 4), (156, 'ELSE'): ('reduce', 4), (172, 'EQ'): ('reduce', 28), (172, 'GT'): ('reduce', 28), (172, 'LT'): ('reduce', 28), (172, 'PLUS'): ('reduce', 28), (172, 'MINUS'): ('reduce', 28), (172, 'RPAREN'): ('reduce', 28), (172, '{'): ('reduce', 28), (172, 'DIV'): ('reduce', 28), (172, 'SEMICOLON'): ('reduce', 28), (172, 'TIMES'): ('reduce', 28), (173, 'IF'): ('reduce', 13), (173, 'EOF'): ('reduce', 13), (173, 'RETURN'): ('reduce', 13), (173, 'LBRACE'): ('reduce', 13), (173, 'RBRACE'): ('reduce', 13), (173, 'NUMBER'): ('reduce', 13), (173, '{'): ('reduce', 13), (173, 'FOR'): ('reduce', 13), (173, '%prec'): ('reduce', 13), (173, 'ELSE'): ('reduce', 13), (173, 'WHILE'): ('reduce', 13), (173, 'LPAREN'): ('reduce', 13), (173, 'CONTINUE'): ('reduce', 13), (173, 'ID'): ('reduce', 13), (173, 'BREAK'): ('reduce', 13), (174, 'IF'): ('reduce', 12), (174, 'EOF'): ('reduce', 12), (174, 'RETURN'): ('reduce', 12), (174, 'LBRACE'): ('reduce', 12), (174, 'RBRACE'): ('reduce', 12), (174, 'NUMBER'): ('reduce', 12), (174, '{'): ('reduce', 12), (174, 'FOR'): ('reduce', 12), (174, '%prec'): ('reduce', 12), (174, 'ELSE'): ('reduce', 12), (174, 'WHILE'): ('reduce', 12), (174, 'LPAREN'): ('reduce', 12), (174, 'CONTINUE'): ('reduce', 12), (174, 'ID'): ('reduce', 12), (174, 'BREAK'): ('reduce', 12), (178, 'EQ'): ('reduce', 20), (178, 'GT'): ('reduce', 20), (178, 'LT'): ('reduce', 20), (178, 'SEMICOLON'): ('reduce', 20), (178, 'PLUS'): ('reduce', 20), (178, 'MINUS'): ('reduce', 20), (178, 'RPAREN'): ('reduce', 20), (178, '{'): ('reduce', 20), (179, 'EQ'): ('reduce', 21), (179, 'GT'): ('reduce', 21), (179, 'LT'): ('reduce', 21), (179, 'SEMICOLON'): ('reduce', 21), (179, 'PLUS'): ('reduce', 21), (179, 'MINUS'): ('reduce', 21), (179, 'RPAREN'): ('reduce', 21), (179, '{'): ('reduce', 21), (180, 'EQ'): ('reduce', 24), (180, 'GT'): ('reduce', 24), (180, 'LT'): ('reduce', 24), (180, 'DIV'): ('reduce', 24), (180, 'SEMICOLON'): ('reduce', 24), (180, 'PLUS'): ('reduce', 24), (180, 'MINUS'): ('reduce', 24), (180, 'TIMES'): ('reduce', 24), (180, 'RPAREN'): ('reduce', 24), (180, '{'): ('reduce', 24), (181, 'EQ'): ('reduce', 23), (181, 'GT'): ('reduce', 23), (181, 'LT'): ('reduce', 23), (181, 'DIV'): ('reduce', 23), (181, 'SEMICOLON'): ('reduce', 23), (181, 'PLUS'): ('reduce', 23), (181, 'MINUS'): ('reduce', 23), (181, 'TIMES'): ('reduce', 23), (181, 'RPAREN'): ('reduce', 23), (181, '{'): ('reduce', 23), (182, '{'): ('reduce', 14), (182, 'SEMICOLON'): ('reduce', 14), (182, 'RPAREN'): ('reduce', 14), (185, 'IF'): ('reduce', 11), (185, 'EOF'): ('reduce', 11), (185, 'RETURN'): ('reduce', 11), (185, 'LBRACE'): ('reduce', 11), (185, 'RBRACE'): ('reduce', 11), (185, 'NUMBER'): ('reduce', 11), (185, '{'): ('reduce', 11), (185, 'FOR'): ('reduce', 11), (185, '%prec'): ('reduce', 11), (185, 'ELSE'): ('reduce', 11), (185, 'WHILE'): ('reduce', 11), (185, 'LPAREN'): ('reduce', 11), (185, 'CONTINUE'): ('reduce', 11), (185, 'ID'): ('reduce', 11), (185, 'BREAK'): ('reduce', 11), (186, 'EQ'): ('reduce', 26), (186, 'GT'): ('reduce', 26), (186, 'LT'): ('reduce', 26), (186, 'PLUS'): ('reduce', 26), (186, 'MINUS'): ('reduce', 26), (186, 'RPAREN'): ('reduce', 26), (186, '{'): ('reduce', 26), (186, 'DIV'): ('reduce', 26), (186, 'SEMICOLON'): ('reduce', 26), (186, 'TIMES'): ('reduce', 26), (196, 'IF'): ('reduce', 6), (196, 'EOF'): ('reduce', 6), (196, 'RETURN'): ('reduce', 6), (196, 'LBRACE'): ('reduce', 6), (196, 'RBRACE'): ('reduce', 6), (196, 'NUMBER'): ('reduce', 6), (196, '{'): ('reduce', 6), (196, 'FOR'): ('reduce', 6), (196, '%prec'): ('reduce', 6), (196, 'ELSE'): ('reduce', 6), (196, 'WHILE'): ('reduce', 6), (196, 'LPAREN'): ('reduce', 6), (196, 'CONTINUE'): ('reduce', 6), (196, 'ID'): ('reduce', 6), (196, 'BREAK'): ('reduce', 6), (197, 'EQ'): ('reduce', 18), (197, 'GT'): ('reduce', 18), (197, 'LT'): ('reduce', 18), (197, 'SEMICOLON'): ('reduce', 18), (197, 'RPAREN'): ('reduce', 18), (197, '{'): ('reduce', 18), (198, 'EQ'): ('reduce', 16), (198, 'GT'): ('reduce', 16), (198, 'LT'): ('reduce', 16), (198, 'SEMICOLON'): ('reduce', 16), (198, 'RPAREN'): ('reduce', 16), (198, '{'): ('reduce', 16), (199, 'EQ'): ('reduce', 17), (199, 'GT'): ('reduce', 17), (199, 'LT'): ('reduce', 17), (199, 'SEMICOLON'): ('reduce', 17), (199, 'RPAREN'): ('reduce', 17), (199, '{'): ('reduce', 17), (204, 'IF'): ('reduce', 9), (204, 'EOF'): ('reduce', 9), (204, 'RETURN'): ('reduce', 9), (204, 'LBRACE'): ('reduce', 9), (204, 'RBRACE'): ('reduce', 9), (204, 'NUMBER'): ('reduce', 9), (204, '{'): ('reduce', 9), (204, 'FOR'): ('reduce', 9), (204, '%prec'): ('reduce', 9), (204, 'ELSE'): ('reduce', 9), (204, 'WHILE'): ('reduce', 9), (204, 'LPAREN'): ('reduce', 9), (204, 'CONTINUE'): ('reduce', 9), (204, 'ID'): ('reduce', 9), (204, 'BREAK'): ('reduce', 9), (208, 'IF'): ('reduce', 5), (208, 'EOF'): ('reduce', 5), (208, 'RETURN'): ('reduce', 5), (208, 'LBRACE'): ('reduce', 5), (208, 'RBRACE'): ('reduce', 5), (208, 'NUMBER'): ('reduce', 5), (208, '{'): ('reduce', 5), (208, 'FOR'): ('reduce', 5), (208, '%prec'): ('reduce', 5), (208, 'ELSE'): ('reduce', 5), (208, 'WHILE'): ('reduce', 5), (208, 'LPAREN'): ('reduce', 5), (208, 'CONTINUE'): ('reduce', 5), (208, 'ID'): ('reduce', 5), (208, 'BREAK'): ('reduce', 5), (210, 'IF'): ('reduce', 8), (210, 'EOF'): ('reduce', 8), (210, 'RETURN'): ('reduce', 8), (210, 'LBRACE'): ('reduce', 8), (210, 'RBRACE'): ('reduce', 8), (210, 'NUMBER'): ('reduce', 8), (210, '{'): ('reduce', 8), (210, 'FOR'): ('reduce', 8), (210, '%prec'): ('reduce', 8), (210, 'ELSE'): ('reduce', 8), (210, 'WHILE'): ('reduce', 8), (210, 'LPAREN'): ('reduce', 8), (210, 'CONTINUE'): ('reduce', 8), (210, 'ID'): ('reduce', 8), (210, 'BREAK'): ('reduce', 8), (211, 'IF'): ('reduce', 7), (211, 'EOF'): ('reduce', 7), (211, 'RETURN'): ('reduce', 7), (211, 'LBRACE'): ('reduce', 7), (211, 'RBRACE'): ('reduce', 7), (211, 'NUMBER'): ('reduce', 7), (211, '{'): ('reduce', 7), (211, 'FOR'): ('reduce', 7), (211, '%prec'): ('reduce', 7), (211, 'ELSE'): ('reduce', 7), (211, 'WHILE'): ('reduce', 7), (211, 'LPAREN'): ('reduce', 7), (211, 'CONTINUE'): ('reduce', 7), (211, 'ID'): ('reduce', 7), (211, 'BREAK'): ('reduce', 7), (214, 'IF'): ('reduce', 10), (214, 'EOF'): ('reduce', 10), (214, 'RETURN'): ('reduce', 10), (214, 'LBRACE'): ('reduce', 10), (214, 'RBRACE'): ('reduce', 10), (214, 'NUMBER'): ('reduce', 10), (214, '{'): ('reduce', 10), (214, 'FOR'): ('reduce', 10), (214, '%prec'): ('reduce', 10), (214, 'ELSE'): ('reduce', 10), (214, 'WHILE'): ('reduce', 10), (214, 'LPAREN'): ('reduce', 10), (214, 'CONTINUE'): ('reduce', 10), (214, 'ID'): ('reduce', 10), (214, 'BREAK'): ('reduce', 10)}
    GOTO = {(0, 'program'): 1, (0, 'stmt_list'): 2, (2, 'add_expr'): 4, (2, 'mul_expr'): 5, (2, 'expr'): 7, (2, 'stmt'): 10, (2, 'comp_expr'): 14, (2, 'atom'): 16, (11, 'add_expr'): 4, (11, 'mul_expr'): 5, (11, 'expr'): 29, (11, 'atom'): 16, (11, 'comp_expr'): 14, (12, 'add_expr'): 4, (12, 'mul_expr'): 5, (12, 'expr'): 30, (12, 'atom'): 16, (12, 'comp_expr'): 14, (13, 'stmt_list'): 31, (20, 'add_expr'): 4, (20, 'mul_expr'): 5, (20, 'expr'): 39, (20, 'atom'): 16, (20, 'comp_expr'): 14, (21, 'mul_expr'): 40, (21, 'atom'): 16, (22, 'mul_expr'): 42, (22, 'atom'): 16, (23, 'atom'): 43, (24, 'atom'): 44, (26, 'add_expr'): 4, (26, 'mul_expr'): 5, (26, 'expr'): 46, (26, 'atom'): 16, (26, 'comp_expr'): 14, (28, 'add_expr'): 4, (28, 'mul_expr'): 5, (28, 'expr'): 48, (28, 'atom'): 16, (28, 'comp_expr'): 14, (31, 'add_expr'): 4, (31, 'mul_expr'): 5, (31, 'expr'): 7, (31, 'stmt'): 10, (31, 'comp_expr'): 14, (31, 'atom'): 16, (32, 'add_expr'): 52, (32, 'mul_expr'): 5, (32, 'atom'): 16, (33, 'add_expr'): 53, (33, 'mul_expr'): 5, (33, 'atom'): 16, (34, 'add_expr'): 54, (34, 'mul_expr'): 5, (34, 'atom'): 16, (38, 'add_expr'): 4, (38, 'mul_expr'): 5, (38, 'expr'): 58, (38, 'atom'): 16, (38, 'comp_expr'): 14, (59, 'add_expr'): 4, (59, 'mul_expr'): 5, (59, 'expr'): 7, (59, 'stmt'): 78, (59, 'comp_expr'): 14, (59, 'atom'): 16, (67, 'add_expr'): 4, (67, 'mul_expr'): 5, (67, 'expr'): 7, (67, 'stmt'): 86, (67, 'comp_expr'): 14, (67, 'atom'): 16, (77, 'add_expr'): 4, (77, 'mul_expr'): 5, (77, 'expr'): 96, (77, 'atom'): 16, (77, 'comp_expr'): 14, (97, 'add_expr'): 4, (97, 'mul_expr'): 5, (97, 'expr'): 7, (97, 'stmt'): 117, (97, 'comp_expr'): 14, (97, 'atom'): 16, (116, 'add_expr'): 4, (116, 'mul_expr'): 5, (116, 'expr'): 136, (116, 'atom'): 16, (116, 'comp_expr'): 14, (156, 'add_expr'): 4, (156, 'mul_expr'): 5, (156, 'expr'): 7, (156, 'stmt'): 175, (156, 'comp_expr'): 14, (156, 'atom'): 16}
    PRODUCTIONS = [("program'", ['program']), ('program', ['stmt_list', 'EOF']), ('stmt_list', []), ('stmt_list', ['stmt_list', 'stmt']), ('stmt', []), ('stmt', ['expr', 'SEMICOLON', '{', '/*', 'Nodo', 'AST:', 'expresión', 'simple', 'segida', 'de', 'punto‐y‐coma', '*/', '}']), ('stmt', ['LBRACE', 'stmt_list', 'RBRACE', '{', '/*', 'Nodo', 'AST:', 'bloque', '(stmt_list)', '*/', '}']), ('stmt', ['IF', 'LPAREN', 'expr', 'RPAREN', 'stmt', '%prec', 'LOWER_THAN_ELSE', '{', '/*', 'Nodo', 'AST:', 'if-else', '*/', '}']), ('stmt', ['IF', 'LPAREN', 'expr', 'RPAREN', 'stmt', 'ELSE', 'stmt', '{', '/*', 'Nodo', 'AST:', 'if‐else', '*/', '}']), ('stmt', ['WHILE', 'LPAREN', 'expr', 'RPAREN', 'stmt', '{', '/*', 'Nodo', 'AST:', 'while', '*/', '}']), ('stmt', ['FOR', 'LPAREN', 'expr', 'SEMICOLON', 'expr', 'SEMICOLON', 'expr', 'RPAREN', 'stmt', '{', '/*', 'Nodo', 'AST:', 'for', '*/', '}']), ('stmt', ['RETURN', 'expr', 'SEMICOLON', '{', '/*', 'Nodo', 'AST:', 'return', '*/', '}']), ('stmt', ['BREAK', 'SEMICOLON', '{', '/*', 'Nodo', 'AST:', 'break', '*/', '}']), ('stmt', ['CONTINUE', 'SEMICOLON', '{', '/*', 'Nodo', 'AST:', 'continue', '*/', '}']), ('expr', ['ID', 'ASSIGNOP', 'expr', '{', '/*', 'Nodo', 'AST:', 'asignación', '*/', '}']), ('expr', ['comp_expr']), ('comp_expr', ['comp_expr', 'LT', 'add_expr', '{', '/*', 'Nodo', 'AST:', 'comparación', '<', '*/', '}']), ('comp_expr', ['comp_expr', 'EQ', 'add_expr', '{', '/*', 'Nodo', 'AST:', 'comparación', '=', '*/', '}']), ('comp_expr', ['comp_expr', 'GT', 'add_expr', '{', '/*', 'Nodo', 'AST:', 'comparación', '>', '*/', '}']), ('comp_expr', ['add_expr']), ('add_expr', ['add_expr', 'PLUS', 'mul_expr', '{', '/*', 'Nodo', 'AST:', 'suma', '*/', '}']), ('add_expr', ['add_expr', 'MINUS', 'mul_expr', '{', '/*', 'Nodo', 'AST:', 'resta', '*/', '}']), ('add_expr', ['mul_expr']), ('mul_expr', ['mul_expr', 'TIMES', 'atom', '{', '/*', 'Nodo', 'AST:', 'multiplicación', '*/', '}']), ('mul_expr', ['mul_expr', 'DIV', 'atom', '{', '/*', 'Nodo', 'AST:', 'división', '*/', '}']), ('mul_expr', ['atom']), ('atom', ['LPAREN', 'expr', 'RPAREN', '{', '/*', 'Nodo', 'AST:', 'paréntesis', '*/', '}']), ('atom', ['ID', '{', '/*', 'Nodo', 'AST:', 'variable', '*/', '}']), ('atom', ['NUMBER', '{', '/*', 'Nodo', 'AST:', 'constante', 'numérica', '*/', '}'])]
    START = 'program'

    @classmethod
    def _init_tables(cls):
        # No-op: las tablas ya están inicializadas en variables de clase
        pass

    @classmethod
    def parse(cls, tokens: List[Tuple[str, Any]]) -> None:
        """Ejecuta el parsing shift-reduce. tokens: lista de (terminal, valor), sin EOF."""
        cls._init_tables()
        stack: List[int] = [0]
        # Mapear el EOF que venga del lexer al marcador '$'
        tokens = [( '$', None) if term == 'EOF' else (term, val) for term, val in tokens]
        tokens = tokens + [('$', None)]  # EOF
        pos = 0
        # Detectar estado de aceptación dinámicamente
        ACCEPT_STATE = None
        for (st, sym), inst in cls.ACTION.items():
            if sym == '$' and inst[0] == 'accept':
                ACCEPT_STATE = st
                break

        while True:
            state = stack[-1]
            term, _ = tokens[pos]
            # Si el parser ve literal 'EOF', lo trata como fin de input
            if term == 'EOF':
                term = '$'
            # Si estamos en EOF y en el estado de aceptación, terminamos
            if term == '$' and state == ACCEPT_STATE:
                return

            action = cls.ACTION.get((state, term))
            if action is None:
                raise SyntaxError(f'Syntax error at position {pos}, unexpected token {term}')
            inst, arg = action
            if inst == 'shift':
                stack.append(arg)
                pos += 1
            elif inst == 'reduce':
                lhs, rhs = cls.PRODUCTIONS[arg]
                for _ in rhs:
                    stack.pop()
                state2 = stack[-1]
                goto_state = cls.GOTO.get((state2, lhs))
                if goto_state is None:
                    raise SyntaxError(f'Missing GOTO for state {state2} and symbol {lhs}')
                stack.append(goto_state)
            elif inst == 'accept':
                return
            else:
                raise SyntaxError(f'Invalid action {inst} in state {state}')

def main():
    """Invoca el parser generado desde línea de comandos."""
    if len(sys.argv) != 2:
        print(f'Usage: {sys.argv[0]} <input_file>')
        sys.exit(1)
    filename = sys.argv[1]
    from sintaxer.src.runtime.parser_interface import LexerInterface
    text = open(filename).read()
    tokens = LexerInterface.tokenize(text)
    Parser.parse(tokens)
    print('Input parsed successfully.')

if __name__ == '__main__':
    main()
